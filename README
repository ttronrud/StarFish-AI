SFAI Library and Console Program:

This project is split into two segments - the SFAI DLL and the SFAIC console app used to test the library.

This project requires the frugally-deep project downloaded from vcpkg.

Instructions:
1. Download the vcpkg repo with git clone https://github.com/microsoft/vcpkg
2. Run the bootstrap-vcpkg.bat file inside the vcpkg directory
3. Install the fdeep package with: vcpkg install frugally-deep
3.5: Default is x86!! Make sure your project is also x86
4. Point either VS or CLion (or whatever IDE) to the CMake toolchain file: [vcpkg install]\scripts\buildsystems\vcpkg.cmake
5. It should work now!

SFAI Library:
The SFAI library consists of the library.cpp/h, and SFAI_CAPI.cpp/h. The CAPI class exposes the "CalcAll" method
in the generated DLL. This method takes in a flat array of 4-byte floats (requires multiples of 2160, which is the
network's input width), the number of chunks to expect, and two non-null pointers for the array of chunk values and
the number of returned chunks.

SFAIC console app:
The SFAIC app uses the DLL generated by the SFAI library project and executes the CalcAll method on input files
defined by the command line arguments.

Use as an external library (DLL):
Place SFAI.DLL in the executable directory. The CalcAll method is exposed, and can be used in C# with:

using System.Runtime.InteropServices;
...
[DllImport(@"SFAI.dll")]
public static extern void CalcAll(char[] model_name, float[] all_chunks, int N_chunks, float[] ret_buf, IntPtr N_ret);

You can then define C# methods to prepare data to be sent through the CalcAll method.
The example below takes the name of an input file. The ECG data samples are then taken from each line, and compiled
into a list. Any length is adjusted to be a multiple of 2160, with gaps filled with zeros. The number of chunks is
calculated, and CalcAll is executed. Finally, the total number of detected heartbeats is summed from the individual
chunk values, and returned.

public static float CalcFile(string fname)
{
    List<float> vals = new List<float>();
    foreach (string line in File.ReadLines(fname))
    {
        vals.Add(float.Parse(line));
    }
    Console.WriteLine("Vals has " + vals.Count.ToString());
    if(vals.Count % 2160 > 0)
    {
        for(int i = 0; i < 2160 - vals.Count % 2160; i++)
        {
            vals.Add(0);
        }
    }
    float[] v_buf = new float[32];
    IntPtr Nr = Marshal.AllocHGlobal(sizeof(int));
    char[] mname = { 'f', 'd', 'e', 'e', 'p', '_', 'm', 'o', 'd', 'e', 'l', '.', 'j', 's', 'o', 'n', '\0' };

    int Nc = (int)Math.Ceiling((decimal)vals.Count / 2160);
    Console.WriteLine("Found " + Nc.ToString() + " chunks");
    CalcAll(mname, vals.ToArray(), Nc, v_buf, Nr);

    float accum = 0;
    for (int i = 0; i < Marshal.ReadInt32(Nr); i++)
    {
        accum += v_buf[i];
    }
    return accum;
}
